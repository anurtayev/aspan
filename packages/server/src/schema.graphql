input MetaDataInput {
  tags: [String!]
  attributes: [[String!]!]
}

type MetaData {
  tags: [String!]
  attributes: [[String!]!]
}

interface Entry {
  id: ID!
  metaData: MetaData
}

type Folder implements Entry {
  id: ID!
  metaData: MetaData
  children: [Entry!]
}

type File implements Entry {
  id: ID!
  metaData: MetaData

  size: Int!
  thumbImageUrl: String!
  imageUrl: String!
  contentType: String!
  prev: String
  next: String
}

union FolderElement = File | Folder

type Query {
  """
  return values:
    - null if no such folder
    - empty array if folder is empty
    - Array of FolderElement otherwise
  """
  entries(id: String!, filterMetaData: MetaDataInput): [FolderElement!]

  """
  return values:
    - empty array if folder is empty
    - Array of FolderElement otherwise
  """
  search(idSubstring: String, filterMetaData: MetaDataInput): [FolderElement!]!

  """
  return values:
    - null if no such entry
    - FolderElement otherwise
  """
  entry(id: String!): FolderElement

  """
  returns list of all tags used in repository
  """
  tags: [String!]!

  """
  returns list of all attributes used in repository
  """
  attributes: [String!]!
}

type Mutation {
  """
  Adds new tag to a folder entry. If element does
  exist it returns updated metadata object or null
  otherwise.
  """
  addTag(id: String!, tag: String!): MetaData
  removeTag(id: String!, tag: String!): MetaData
  addAttribute(id: String!, attribute: [String!]!): MetaData
  removeAttribute(id: String!, attributeKey: String!): MetaData
  setTitle(id: String!, title: String!): MetaData
  setDescription(id: String!, description: String!): MetaData
  setMetaData(id: String!, metaData: MetaDataInput!): MetaData
}
