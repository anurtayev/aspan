input MetaDataInput {
  tags: [String!]
  attributes: [[String!]!]
}

type MetaData {
  tags: [String!]
  attributes: [[String!]!]
}

interface AbstractEntry {
  id: ID!
  metaData: MetaData
}

type Folder implements AbstractEntry {
  id: ID!
  metaData: MetaData
}

type File implements AbstractEntry {
  id: ID!
  metaData: MetaData

  thumbImageUrl: String!
  imageUrl: String!
  contentType: String!

  prev: String
  next: String
}

union Entry = File | Folder

type Query {
  entries(id: String, metaDataInput: MetaDataInput): [Entry!]!

  entry(id: String!): Entry

  """
  returns list of all tags used in repository
  """
  tags: [String!]!

  """
  returns list of all attributes used in repository
  """
  attributes: [String!]!
}

type Mutation {
  """
  Adds new tag to a folder entry. If element does
  exist it returns updated metadata object or null
  otherwise.
  """
  addTag(id: String!, tag: String!): MetaData
  removeTag(id: String!, tag: String!): MetaData
  addAttribute(id: String!, attribute: [String!]!): MetaData
  removeAttribute(id: String!, attributeKey: String!): MetaData
  setTitle(id: String!, title: String!): MetaData
  setDescription(id: String!, description: String!): MetaData
  setMetaData(id: String!, metaDataInput: MetaDataInput!): MetaData
}
